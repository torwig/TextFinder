Приложение написано с использованием версии 5.6 фреймворка Qt.

Переадрессация (коды 301 и 302) обрабатывается (с версии 5.6 можно указать специальный атрибут для автоматического перехода, но в предыдущих версиях этого нет).
Ошибки SSL игнорируются.
Минимальные и максимальные значения количества потоков и сканируемых страниц задаются в файле base/config.h, а фактические значения указывает пользователь с помощью графического интерфейса.

Загрузка страниц выполняется в многопоточном режиме, если пользователь выбрал число потоков больше, чем 1.
Одновременно загружаются все страницы одного уровня графа, вершиной которого является начальная страница.
Используется класс QThread. Создается столько потоков, сколько выбрано пользователем. После завершения поиска потоки не уничтожаются. Если в следующий раз необходимо будет большее число потоков, дополнительные потоки будут созданы; иначе будут использоваться существующие потоки, но не больше, чем выбрано пользователем.
Класс QThreadPool управляет пулом потоков и временем их жизни; в данном приложении этот класс не используется.

После загрузки всех страниц текущего уровня графа, выполняется поиск текста на каждой загруженной странице.
Поиск текста регистронезависим.
Кроме того, если текст найден, приложение показывает так называемый "контекст", в котором текст найден (n символов слева и n символов справа).
Если текст на странице не найден, выполняется поиск всех ссылок на странице; они добавляются в конец очереди просмотра.
Структура данных "очередь"" используется для обхода вершин графа в алгоритме поиска в ширину.
Граф страниц просматривается уровень за уровнем, пока:
- не будет найден текст на одной из страниц;
- не будет достигнуто ограничение на количество просмотренных страниц (указывается пользователем);
- все уровни графа будут просмотрены.
Ведется учет посещенных страниц.

Что можно улучшить:
1. Алгоритм поиска URL-адресов на странице; можно использовать регулярные выражения.
2. Предусмотреть сборку с помощью версии 4.x фреймворка Qt.
3. Начинать поиск текста еще до окончания загрузки последней страницы текущего уровня графа.
4. Регулировать количество потоков, удаляя ненужные в данный момент, основываясь на времени простоя.

Тестирование:
1. Такие функции, как поиск URL-адресов на странице, тестировать с помощью QTest или другого инструмента тестирования.
2. Можно подготовить тесты, создавая HTML-страницы на диске и указывая не http://, а file:// как начало ссылки; также загрузку по сети можно заменить загрузкой с диска.
3. Логирование работы потоков и процесса разделения работы между ними.
4. Тестирование на ресурсах в сети Интернет.
